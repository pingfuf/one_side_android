package com.oneside.model;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONException;
import com.alibaba.fastjson.JSONObject;
import com.oneside.model.beans.GymSupportCard;
import com.oneside.utils.LogUtils;
import com.oneside.utils.ViewUtils;
import com.oneside.utils.WebUtils;
import com.oneside.R;


import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.

/**
 * Entity mapped to table CARD_MERCHANT.
 */
public class HomeMerchant implements Serializable {

    private static final String KEY_MERCHANT_ID = "id";// id of merchant
    private static final String KEY_DISTANCE = "distance";
    private static final String KEY_NAME = "name";
    private static final String KEY_LOCATION = "location";
    private static final String KEY_IS_FOLLOWED = "is_followed";
    private static final String KEY_FANS_COUNT = "fans_count";
    private static final String KEY_IS_XX_SUPPORTED = "xxpass_supported";

    private long merchantID;
    private String name;
    private String location;
    private double distance;
    private boolean isFollowed;
    private int fansCount;
    private boolean isXXSupported;

    //场馆的logo
    public String logoUrl;

    //场馆的评分
    public float score;

    public List<GymSupportCard> characters;

    public HomeMerchant(long merchantID) {
        this.merchantID = merchantID;
    }

    public static HomeMerchant fromJson(JSONObject j) {
        if (j == null || j.size() == 0) {
            return null;
        }
        long merchantID = WebUtils.getJsonLong(j, KEY_MERCHANT_ID, 0l);
        String name = WebUtils.getJsonString(j, KEY_NAME, "");
        String location = WebUtils.getJsonString(j, KEY_LOCATION, "");
        double distance = WebUtils.getJsonDouble(j, KEY_DISTANCE, -1d);
        boolean isFollowed = WebUtils.getJsonBoolean(j, KEY_IS_FOLLOWED, false);
        int fansCount = WebUtils.getJsonInt(j, KEY_FANS_COUNT, 0);
        boolean isXXSupported = WebUtils.getJsonBoolean(j, KEY_IS_XX_SUPPORTED, true);

        HomeMerchant cm = new HomeMerchant(merchantID);
        cm.setName(name);
        cm.setLocation(location);
        cm.setDistance(distance);
        cm.setIsFollowed(isFollowed);
        cm.setFansCount(fansCount);
        cm.setIsXXSupported(isXXSupported);
        cm.logoUrl = WebUtils.getJsonString(j, "logo", "");
        cm.score = (float) WebUtils.getJsonFloat(j, "rating", 0.0f);

        JSONArray jsonArray = WebUtils.getJsonArray(j, "gym_tags");
        if(jsonArray != null) {
            cm.characters = new ArrayList<GymSupportCard>();
            for(int i = 0; i < jsonArray.size(); i++) {
                try {
                    JSONObject jsonObject = jsonArray.getJSONObject(i);
                    GymSupportCard character = new GymSupportCard();
                    character.name = WebUtils.getJsonString(jsonObject, "desc", "");
                    character.type = WebUtils.getJsonInt(jsonObject, "tag_type", 0);
                    character.tag = WebUtils.getJsonString(jsonObject, "char", "");
                    character.color = WebUtils.getJsonString(jsonObject, "color", "");
                    cm.characters.add(character);
                } catch (JSONException e) {
                    e.printStackTrace();
                }
            }
        }

        return cm;
    }

    public String toString() {
        JSONObject j = toJson();
        return j == null ? super.toString() : j.toString();
    }

    public boolean equals(Object o) {
        if (this == o) {
            return true;
        } else if (o instanceof HomeMerchant) {
            if (this.merchantID == ((HomeMerchant) o).getMerchantID()) {
                return true;
            }
        }
        return false;
    }

    public JSONObject toJson() {
        try {
            JSONObject json = new JSONObject();
            json.put(KEY_MERCHANT_ID, this.merchantID);
            json.put(KEY_NAME, this.name);
            json.put(KEY_LOCATION, this.location);
            json.put(KEY_DISTANCE, this.distance);

            return json;
        } catch (Exception e) {
            LogUtils.w(e, " parse CardMerchant serial error");

        }
        return null;
    }


    public long getMerchantID() {
        return merchantID;
    }

    public void setMerchantID(long merchantID) {
        this.merchantID = merchantID;
    }


    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }


    public String getLocation() {
        return location;
    }

    public void setLocation(String location) {
        this.location = location;
    }


    public Double getDistance() {
        return distance;
    }

    public void setDistance(Double distance) {
        this.distance = distance;
    }


    public void setDistance(double distance) {
        this.distance = distance;
    }

    public boolean isFollowed() {
        return isFollowed;
    }

    public void setIsFollowed(boolean isFollowed) {
        this.isFollowed = isFollowed;
    }

    public int getFansCount() {
        return fansCount;
    }

    public void setFansCount(int fansCount) {
        this.fansCount = fansCount;
        if (this.fansCount < 0) {
            this.fansCount = 0;
        }
    }


    public String getFansCountDesc() {
        return String.format(ViewUtils.getString(R.string.merchant_fans_count), fansCount);
    }

    public boolean isXXSupported() {
        return isXXSupported;
    }

    public void setIsXXSupported(boolean isXXSupported) {
        this.isXXSupported = isXXSupported;
    }
}
