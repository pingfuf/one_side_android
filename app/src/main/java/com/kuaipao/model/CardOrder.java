package com.kuaipao.model;

import java.io.Serializable;
import java.util.Date;

import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.annotation.JSONField;
import com.kuaipao.manager.R;
import com.kuaipao.utils.LangUtils;
import com.kuaipao.utils.LogUtils;
import com.kuaipao.utils.ViewUtils;
import com.kuaipao.utils.WebUtils;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.

/**
 * Entity mapped to table CARD_ORDER.
 */
public class CardOrder implements Serializable {
    /**
     *
     */
    private static final long serialVersionUID = -2610116364656540881L;
    // "id": 1,
    // "status": 0, // 状态: 0-未使用或者过期, 看时间 1-已使用 2-已取消
    // "order_code": "8937337192", // 预约码: 如果是null, 则提示运营人员正在处理
    // "course": {
    // "id": "5710458dc4ec4a78b1162420006d872d_1431615600",
    // "name": "提前约"
    // "type": 1,
    // "start": "2015-05-14T23:00:00",
    // "end": "2015-05-14T23:30:00",
    // },
    // "gym": {
    // "id": 160,
    // "name": "林业大学团购"
    // "location": "北京市海淀区北京林业大学",
    // }
    private static final String KEY_ORDER_ID = "id";
    private static final String KEY_STATUS = "status";
    private static final String KEY_ORDER_CODE = "order_code";

    /******
     * class info
     *****/
    private static final String KEY_CLASS = "course";
    private static final String KEY_CLASS_ID = "id";
    private static final String KEY_CLASS_TYPE = "type";
    private static final String KEY_CLASS_NAME = "name";
    private static final String KEY_CLASS_NOTICE = "notice";
    private static final String KEY_START_TIME = "start";
    private static final String KEY_END_TIME = "end";
    private static final String KEY_MERCHANT_GRUOP_NAME = "co_site";
    /******
     * merchant info
     *****/
    private static final String KEY_MERCHANT = "gym";
    private static final String KEY_MERCHANT_ID = "id";
    private static final String KEY_MERCHANT_NAME = "name";
    private static final String KEY_MERCHANT_LOCATION = "location";
    private static final String KEY_MERCHANT_CO_TYPE = "co_type";

    private static final String KEY_UPDATE_TIME = "update_time";

    private static final String KEY_XIAO_XIONG_QUAN = "xxquan";
    private static final String KEY_XIAO_XIONG_QUAN_INVITE = "invite";
    private static final String KEY_XIAO_XIONG_QUAN_CHECKIN = "checkin";

    private long id;
    @JSONField(name = KEY_ORDER_ID)
    private long orderID;
//    @JSONField(name = KEY_MERCHANT_ID)
//    private long merchantID;
//    private int classType = 1;
//    private int coType = CO_TYPE_DIRECT;//"co_type": 0 or 1 or 2, 0-团购, 1-直接, 2-小泥人

    public static final int CO_TYPE_GROUP = 0;
    public static final int CO_TYPE_DIRECT = 1;
    public static final int CO_TYPE_XIAONIRENG = 2;

    // private Integer orderStatus;
    @JSONField(name = KEY_ORDER_CODE)
    private String orderCode;
//    private String classID;
//    private String className;
//    private String merchantName;
//    private String groupPurchaseName;
//    private String merchantLocation;
//    private java.util.Date updateTime;
//    private java.util.Date startTime;
//    private java.util.Date endTime;
//    private String notice;


    @JSONField(name = KEY_MERCHANT)
    private CardSimpleMerchant cardMerchant;
    @JSONField(name = KEY_CLASS)
    private CardSimpleClass cardClass;
    @JSONField(name = KEY_XIAO_XIONG_QUAN)
    private JSONObject shareInfo;
    private long inviteMsgID = 0;// >0 表示已邀约过
    private long punchMsgID = 0;// >0 表示已打卡过


//    /**
//     * orderType :  0-xxCard  1-MerchantCard  2-specialCard
//     */
//    private Integer orderType = 0;

    public enum OrderStatus {
        OrderStatusUnused, OrderStatusFinished, OrderStatusCancelled
    }

    @JSONField(name = KEY_STATUS)
    private OrderStatus orderStatus = OrderStatus.OrderStatusUnused; // 状态: 0-未使用或者过期, 看时间 1-已使用 2-已取消


    public CardOrder() {

    }


    public String toString() {
        JSONObject j = toJson();
        return j == null ? super.toString() : j.toString();
    }

    public boolean equals(Object o) {
        if (this == o) {
            return true;
        } else if (o instanceof CardOrder) {
            if (this.getClassID().equals(((CardOrder) o).getClassID())
                    && this.orderID == ((CardOrder) o).getOrderID()) {
                return true;
            }
        }
        return false;
    }

//    public static CardOrder fromJson(JSONObject j) {
//        if (j == null || j.size() == 0) {
//            return null;
//        }
//        long orderID = WebUtils.getJsonLong(j, KEY_ORDER_ID, 0l);
//        String orderCode = WebUtils.getJsonString(j, KEY_ORDER_CODE, "");
//        OrderStatus orderStatus = LangUtils.getEnumObj(OrderStatus.values(), WebUtils.getJsonInt(j, KEY_STATUS, 0));
//        String groupName = WebUtils.getJsonString(j, KEY_MERCHANT_GRUOP_NAME, "");
//
//
//        CardOrder co = new CardOrder(orderID);
//        co.setOrderStatus(orderStatus);
//        co.setOrderCode(orderCode);
//        co.setGroupPurchaseName(groupName);
//
//        JSONObject classJson = WebUtils.getJsonObject(j, "course");
//        if (classJson != null) {
//            String classID = WebUtils.getJsonString(classJson, KEY_CLASS_ID, "");
//
//            int classType = WebUtils.getJsonInt(classJson, KEY_CLASS_TYPE, 1);
//            String className = WebUtils.getJsonString(classJson, KEY_CLASS_NAME, "");
//            String startTime = WebUtils.getJsonString(classJson, KEY_START_TIME, "");
//            String endTime = WebUtils.getJsonString(classJson, KEY_END_TIME, "");
//            co.setClassID(classID);
//            co.setClassType(classType);
//            if (LangUtils.isNotEmpty(startTime)) {
//                Date d = LangUtils.formatDate(startTime, "yyyy-MM-dd'T'HH:mm:ss");
//                // LogUtils.d("date String = %s date = %s", startTime, d);
//                if (d != null)
//                    co.setStartTime(d);
//            }
//            if (LangUtils.isNotEmpty(endTime)) {
//                Date d = LangUtils.formatDate(endTime, "yyyy-MM-dd'T'HH:mm:ss");
//                if (d != null)
//                    co.setEndTime(d);
//            }
//            co.setClassName(className);
//            String notice = WebUtils.getJsonString(classJson, KEY_CLASS_NOTICE, "");
//            co.setNotice(notice);
//        }
//
//        JSONObject merchantJson = WebUtils.getJsonObject(j, "gym");
//        if (merchantJson != null) {
//            long mId = WebUtils.getJsonLong(merchantJson, KEY_MERCHANT_ID, 0l);
//            String mName = WebUtils.getJsonString(merchantJson, KEY_MERCHANT_NAME, "");
//            String mLocation = WebUtils.getJsonString(merchantJson, KEY_MERCHANT_LOCATION, "");
//            int coType = WebUtils.getJsonInt(merchantJson, KEY_MERCHANT_CO_TYPE, 1);
//
//            co.setMerchantID(mId);
//            co.setMerchantName(mName);
//            co.setMerchantLocation(mLocation);
//            co.setCoType(coType);
//        }
//
////        JSONObject xiaoXiongQuanJson = WebUtils.getJsonObject(j, KEY_XIAO_XIONG_QUAN);
////        if (xiaoXiongQuanJson != null) {
////            int inviteMsgID = WebUtils.getJsonInt(xiaoXiongQuanJson, KEY_XIAO_XIONG_QUAN_INVITE, 0);
////            co.setInviteMsgID(inviteMsgID);
////            int punchMsgID = WebUtils.getJsonInt(xiaoXiongQuanJson, KEY_XIAO_XIONG_QUAN_CHECKIN, 0);
////            co.setPunchMsgID(punchMsgID);
////        }
//
//        return co;
//    }

    public JSONObject toJson() {
        try {
            JSONObject json = new JSONObject();
            json.put(KEY_ORDER_ID, this.orderID);
//            json.put(KEY_MERCHANT_GRUOP_NAME, this.groupPurchaseName);
            json.put("class_" + KEY_CLASS_ID, this.getClassID());
            json.put("class_" + KEY_CLASS_NAME, this.getClassName());
            json.put("class_" + KEY_CLASS_TYPE, this.getClassType());
            json.put(KEY_ORDER_CODE, this.orderCode);
            json.put("class_" + KEY_START_TIME, this.getStartTime());
            json.put("class_" + KEY_END_TIME, this.getEndTime());
            json.put("class_" + KEY_CLASS_NOTICE, this.getNotice());
            json.put(KEY_STATUS, this.orderStatus.ordinal());

            json.put("merchant_" + KEY_MERCHANT_ID, this.getMerchantID());
            json.put("merchant_" + KEY_MERCHANT_NAME, this.getMerchantName());
            json.put("merchant_" + KEY_MERCHANT_LOCATION, this.getMerchantLocation());
            json.put("merchant_" + KEY_MERCHANT_CO_TYPE, this.getCoType());

            json.put("xxq_" + KEY_XIAO_XIONG_QUAN_INVITE, this.inviteMsgID);
            json.put("xxq_" + KEY_XIAO_XIONG_QUAN_CHECKIN, this.punchMsgID);


            return json;
        } catch (Exception e) {
            LogUtils.w(e, " parse order serial error");

        }
        return null;
    }


    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public long getOrderID() {
        return orderID;
    }

    public void setOrderID(long orderID) {
        this.orderID = orderID;
    }

    public Long getMerchantID() {
        return cardMerchant == null ? 0 : cardMerchant.getMerchantID();
    }


    public int getClassType() {
        return cardClass == null ? 0 : cardClass.getCoachType();
    }


    public String getShowOrderCode() {
        if (getCoType() == CO_TYPE_GROUP) {

            return LangUtils.isEmpty(orderCode) ? ViewUtils.getString(R.string.order_no_order_code) : orderCode;

        } else {
            return orderCode;
        }
    }


    public int getCoType() {
        return cardMerchant == null ? 0 : cardMerchant.getPartnerType();
    }


    public OrderStatus getOrderStatus() {
        return orderStatus;
    }

    public int getOrderStatusIndex() {
        return orderStatus.ordinal();
    }

    public void setOrderStatus(OrderStatus orderStatus) {
        this.orderStatus = orderStatus;
    }

    public void setOrderStatusIndex(int orderStatus) {
        this.orderStatus = LangUtils.getEnumObj(OrderStatus.values(), orderStatus);
    }

    public String getOrderCode() {
        return orderCode;
    }


    public boolean isExpired() {
        return getEndTime() == null ? true : getEndTime().getTime() < System.currentTimeMillis();
    }

    public void setOrderCode(String orderCode) {
        this.orderCode = orderCode;
    }

    public String getClassID() {
        return cardClass == null ? "" : cardClass.getClassId();
    }


    public String getClassName() {
        return cardClass == null ? "" : cardClass.getName();
    }


    public String getMerchantName() {
        return cardMerchant == null ? "" : cardMerchant.getName();
    }


    public String getMerchantLocation() {
        return cardMerchant == null ? "" : cardMerchant.getLocation();
    }


    public java.util.Date getStartTime() {
        return cardClass == null ? null : cardClass.getStart();
    }


    public java.util.Date getEndTime() {
        return cardClass == null ? null : cardClass.getEnd();
    }


    public static int getClassTypeDrawableID(int courseType) {
        switch (courseType) {
            // case 0:
            // return R.drawable.ic_my_order_swimming;
            case 1:
                return R.drawable.ic_my_order_hickey;
            case 2:
                return R.drawable.ic_my_order_swimming;
            case 3:
                return R.drawable.ic_my_order_yoga;
            case 4:
                return R.drawable.ic_my_order_dance;
            case 5:
                return R.drawable.ic_my_order_bike;
            default:
                return R.drawable.ic_my_order_swimming;
        }
    }

    public String getNotice() {
        return cardClass == null ? null : cardClass.getNotice();
    }


    public boolean isAlreadyInvite() {
        return inviteMsgID > 0 ? true : false;
    }

    public long getInviteMsgID() {
        return inviteMsgID;
    }

//    public void setInviteMsgID(int inviteMsgID) {
//        this.inviteMsgID = inviteMsgID;
//    }


    public boolean isAlreadyPunch() {
        return punchMsgID > 0 ? true : false;
    }

    public long getPunchMsgID() {
        return punchMsgID;
    }

//    public void setPunchMsgID(int punchMsgID) {
//        this.punchMsgID = punchMsgID;
//    }

    public void setShareInfo(JSONObject shareInfo) {

//        this.shareInfo = shareInfo;
        inviteMsgID = WebUtils.getJsonLong(shareInfo, KEY_XIAO_XIONG_QUAN_INVITE, 0l);
        punchMsgID = WebUtils.getJsonLong(shareInfo, KEY_XIAO_XIONG_QUAN_CHECKIN, 0l);
//        this.shareInfo = null;
    }

    public void setCardMerchant(CardSimpleMerchant cardMerchant) {
        this.cardMerchant = cardMerchant;
    }

    public void setCardClass(CardSimpleClass cardClass) {
        this.cardClass = cardClass;
    }
}
